@use "sass:color";
@use "sass:string";
@import "globals";

$progress-bar-height: 1.5em; // up from 0.3em
$control-bar-border-radius: 0.5rem;
$progress-bar-border-radius: calc($control-bar-border-radius / 2);
$video-elem-background: rgba($header, 0.7);
$video-elem-color: color-mix(in oklab, $on-header, white 90%);

@include fonts;
* {
	accent-color: $primary !important;
}

body {
  margin: 0;
}

video,
.vjs-poster {
  background-color: $on-background;
}

.video-js .vjs-control-bar {
  background: $video-elem-background !important;
  color: white !important;
  color: $video-elem-color !important;
  border-radius: $control-bar-border-radius;
  margin: 0 $control-bar-border-radius $control-bar-border-radius;
  width: auto;
}

.video-js .vjs-progress-holder {
  // Make the hitbox for the progress bar bigger
  height: $progress-bar-height;

  border-radius: $progress-bar-border-radius;
  background: rgba($on-header, 0.1);
  overflow: hidden;
  cursor: ew-resize;

  .vjs-load-progress {
    background: rgba($on-header, 0.2);
    border-bottom-right-radius: $progress-bar-border-radius;
    border-top-right-radius: $progress-bar-border-radius;
    transition: width 1s ease-in;
    * {
      opacity: 0;
    }
  }

  .vjs-play-progress {
    background: $on-header;

    &::before { // handle of the progress bar
      content: "";
      display: block;
      width: $progress-bar-height;
      height: $progress-bar-height;
      background: $on-header;
      border-radius: $progress-bar-border-radius;
      top: 0;
      right: -$progress-bar-border-radius;
      font-size: inherit;
    }
  }
}
.video-js .vjs-progress-control .vjs-progress-holder,
.video-js .vjs-progress-control:hover .vjs-progress-holder {
  // don't resize the progress bar when hovering over it
  font-size: inherit !important;
}

.video-js .vjs-title-bar-link { // title of the video
  width: auto;
  padding-left: 1em;
  padding-right: 1em;
  background: $surface-1;
  color: $on-surface;
  border-radius: 0.5em;

  top: 1em;
  right: 50%;
  left: auto;
  transform: translateX(50%);

  font-size: min(2em, 4vw, 6vh);

  > a {
    color: $on-surface !important;
    text-decoration: none;
  }
}

.vjs-menu-button-popup .vjs-menu {
  &, .vjs-menu-content {
    background: $video-elem-background !important;
    color: white !important;
    color: $video-elem-color !important;
    border-radius: $control-bar-border-radius $control-bar-border-radius 0 0;

    * {
      background: transparent !important;
      color: white !important;
      color: $video-elem-color !important;
    }
  }

  .vjs-menu-item {
    background: transparent;
    color: $on-surface;
    box-shadow: none !important;

    &.vjs-selected {
      background: rgba($primary, 0.1);
    }

    &:hover,
    &:focus {
      background: rgba($primary, 0.2);
    }
  }
}

/* animate menu opening */
.vjs-menu-button-popup .vjs-menu {
  display: block !important;
  opacity: 0;
  transition: opacity 0.075s;
  pointer-events: none;
}
.vjs-menu-button-popup .vjs-menu.vjs-lock-showing,
.vjs-workinghover .vjs-menu-button-popup:hover .vjs-menu {
  opacity: 1;
  pointer-events: auto;
}

.vjs-downloads-button {
  /* hide the "Download Subtitles and Transcription" button */
  display: none;
}

/* captions */
.vjs-text-track-display > div > div > div {
    background: $video-elem-background !important;
    color: white !important;
    color: $video-elem-color !important;
    border-radius: 0.2em !important;
    font-size: 75% !important;
    display: inline-block !important;
    max-width: 20em !important;
    padding: 0 1em !important;
    text-align: start;
    text-wrap: pretty;

    @include fonts-body;
}

/* in fullscreen, use a better scaling algorithm */
:fullscreen video,
video:fullscreen {
  image-rendering: -webkit-optimize-contrast;
  -ms-interpolation-mode: nearest-neighbor;

  // this is a hack to force SCSS to allow the above vendor prefixes
  --foo: "bar";

  image-rendering: pixelated;
  image-rendering: -moz-crisp-edges;
  image-rendering: crisp-edges;
}

/* play and pause animations */
#video.video-js {
  $on-surface-without-hash: string.slice(color.ie-hex-str($on-surface), 4);
  &::before {
    content: "";
    display: block;
    position: absolute;
    top: 50%;
    left: 50%;
    width: 4rem;
    height: 4rem;
    margin: -2rem 0 0 -2rem;
    pointer-events: none;
    opacity: 0;
    animation: animation-that-doesnt-exist 0.5s ease-out;
    z-index: 1000;
  }
  &.vjs-playing::before {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%23#{$on-surface-without-hash}' d='M6 19h4V5H6v14zm8-14v14h4V5h-4z'/%3E%3C/svg%3E");
    animation-name: bounce-out-0;
  }
  &.vjs-paused::before {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%23#{$on-surface-without-hash}' d='M8 5v14l11-7z'/%3E%3C/svg%3E");
    animation-name: bounce-out-1;
  }

  @for $i from 0 through 1 {
    // We need multiple animations so we can restart the animation when the state changes
    @keyframes bounce-out-#{$i} {
      from {
        transform: scale(1);
        opacity: 1;
      }
      to {
        transform: scale(1.5);
        opacity: 0;
      }
    }
  }
}
